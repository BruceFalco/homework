		//for each element from low to r, if element is less than
		// pivot, then it switches with the earliest element l
		wall++;
		// throws the element behind the wall, wall advances


// the wall is now dividing the elements lower than pivot (left of wall
	// ) and values equal to or higher than pivot (right of wall)
	// less,less,less, WALL, pivot, higher, pivot, The Pivot
	// wall is on a value either equal to or higher than pivot


	tmp = a[rwall];
	a[wall]=a[r];
	a[r]=tmp;
	// the wall switches with the latest element, which was presumably
	// the pivot
	// so the value of WALL switched with the pivot value
	rwall++;
	// rightwall advances; is now the value after the pivot that has been 
	// placed smackdab in middle of list

	// by now the list is organized thus:
	// [lower, lower, lower, PIVOT (formerly wall), ??pivot, ??higher??,..]
	// so running over remaining elements, that is, elements whose values
	// are higher than or equal to the pivot's,
	// if the element IS equal to the pivot, then swap value of rwall
	// and the element i in question

	// this way, while the list is not sorted completely accurately,
	// the list looks something like this:
	// [lower, lower, lower, pivot, pivot, pivot, higher, higher, higher]


	return (wall+rwall)/2;
	// wall and rwall are max/min locations of the pivots;
	// this essentially returns index/position of the pivot


   public int[] qsort(int[] a, int l, int h){
	int pi,pval;
	pi = partition(a,l,h);
	// returns index of the pivot value after running the entire list
	// through partition
	pval = a[pi];
	// pval is pivot value essentially; calls value of index of pivot value

	//if (k==pi)
	/*
	    return pval;
	    //else if (k > pi)
	    return qselect(a,k,pi+1,h);
	    //else
	    return qselect(a,k,l,pi-1);
	*/   

	qsort(a,pi+1,h);
	qsort(a,l,pi-1);

 }
    // evaluating a smaller and smaller range

